using System;
using System.Collections.Generic;
using System.Text;

namespace Fixture17
{
    public class FixturedRound
    {
        public List<FixturedMatch> Matches { get; private set; }
        public int RoundNumber { get; private set; }
        public DateTime Saturday { get { return DateTime.FromOADate(43981.5 + 7.0 * RoundNumber); } }

        public FixturedRound(int roundNumber)
        {
            RoundNumber = roundNumber;
            Matches = new List<FixturedMatch>();
        }

        // Fisher-Yates shuffle
        public static FixturedRound RandomRound(int roundNumber)
        {
            FixturedRound r = new FixturedRound(roundNumber);
            Random rng = new Random();
            int n = 18;
            int[] array = new int[n];
            for (int i = 0; i < n; i++)
                array[i] = i;

            for (int i = 0; i < n - 1; i++)
            {
                // Use Next on random instance with an argument.
                // ... The argument is an exclusive bound.
                //     So we will not go past the end of the array.
                int rand = i + rng.Next(n - i);
                int temp = array[rand];
                array[rand] = array[i];
                array[i] = temp;
            }

            for (int j = 0; j < n; j += 2)
            {
                if (array[j] > array[j + 1])
                    r.Matches.Add(new FixturedMatch(r, Matchup.FindMatchup(array[j + 1], array[j]), j % 4 == 0));
                else
                    r.Matches.Add(new FixturedMatch(r, Matchup.FindMatchup(array[j], array[j + 1]), j % 4 == 0));
            }

            return r;
        }

        public void AddMatch(int i1, int i2, bool isHome, int? exactDate = null)
        {
            FixturedMatch fm = new FixturedMatch(this, Matchup.FindMatchup(i1, i2), isHome, exactDate);
            Matches.Add(fm);
        }

        public override string ToString()
        {
            string s = "Round " + RoundNumber.ToString() + ":";
            foreach (FixturedMatch fm in Matches)
                s += "  " + fm.ToString();
            return s;
        }

        public string ToCSV()
        {
            string s = "";
            foreach (FixturedMatch fm in Matches)
                s += fm.ToCSV() + System.Environment.NewLine;
            return s;
        }
    }
}
